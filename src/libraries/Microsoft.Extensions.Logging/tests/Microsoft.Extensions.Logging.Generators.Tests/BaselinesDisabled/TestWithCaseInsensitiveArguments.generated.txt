// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.Logging.Generators.Tests.TestClasses
{
    partial class TestWithCaseInsensitiveArguments 
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.0.0")]
        private readonly struct __LogMethodStruct : global::System.Collections.Generic.IReadOnlyList<global::System.Collections.Generic.KeyValuePair<string, object?>>
        {
            private readonly global::System.Int32 _a1;
            private readonly global::System.Int32 _a2;
            private readonly global::System.Int32 _a3;
            private readonly global::System.Int32 _a4;
            private readonly global::System.Int32 _a5;

            public __LogMethodStruct(global::System.Int32 a1, global::System.Int32 a2, global::System.Int32 a3, global::System.Int32 a4, global::System.Int32 a5)
            {
                this._a1 = a1;
                this._a2 = a2;
                this._a3 = a3;
                this._a4 = a4;
                this._a5 = a5;

            }

            public override string ToString()
            {
                var A1 = this._a1;
                var a2 = this._a2;
                var A3 = this._a3;
                var a4 = this._a4;
                var A5 = this._a5;

                return $"M2 {A1} {a2} {A3} {a4} {A5}";
            }

            public static string Format(__LogMethodStruct state, global::System.Exception? ex) => state.ToString();

            public int Count => 6;

            public global::System.Collections.Generic.KeyValuePair<string, object?> this[int index]
            {
                get => index switch
                {
                    0 => new global::System.Collections.Generic.KeyValuePair<string, object?>("A1", this._a1),
                    1 => new global::System.Collections.Generic.KeyValuePair<string, object?>("a2", this._a2),
                    2 => new global::System.Collections.Generic.KeyValuePair<string, object?>("A3", this._a3),
                    3 => new global::System.Collections.Generic.KeyValuePair<string, object?>("a4", this._a4),
                    4 => new global::System.Collections.Generic.KeyValuePair<string, object?>("A5", this._a5),
                    5 => new global::System.Collections.Generic.KeyValuePair<string, object?>("{OriginalFormat}", "M2 {A1} {a2} {A3} {a4} {A5}"),

                    _ => throw new global::System.IndexOutOfRangeException(nameof(index)),  // return the same exception LoggerMessage.Define returns in this case
                };
            }

            public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, object?>> GetEnumerator()
            {
                for (int i = 0; i < 6; i++)
                {
                    yield return this[i];
                }
            }

            global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "6.0.0.0")]
        public static partial void LogMethod(global::Microsoft.Extensions.Logging.ILogger logger, global::System.Int32 a1, global::System.Int32 a2, global::System.Int32 a3, global::System.Int32 a4, global::System.Int32 a5)
        {
            if (logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Error))
            {
                logger.Log(
                    global::Microsoft.Extensions.Logging.LogLevel.Error,
                    new global::Microsoft.Extensions.Logging.EventId(12, nameof(LogMethod)),
                    new __LogMethodStruct(a1, a2, a3, a4, a5),
                    null,
                    __LogMethodStruct.Format);
            }
        }
    }
}